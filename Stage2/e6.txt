Q3:
Input:
string_to_array = function (str) {
     return str.trim().split(" ");
};

console.log(string_to_array("Simran Narang"));

Output:
["Simran", "Narang"]
-----------------------------------------------------------------------------

Q5:
Input:

abbrev_name = function (str1) {
    var split_names = str1.trim().split(" ");
    if (split_names.length > 1) {
        return (split_names[0] + " " + split_names[1].charAt(0) + ".");
    }
    return split_names[0];
};
console.log(abbrev_name("Simran Narang"));

Output:

"Simran N."
-------------------------------
Q5(A):

Input:
Input:

abbrev_name = function (str1) {
    var split_names = str1.trim().split(" ");
    if (split_names.length > 1) {
        return (split_names[0].charAt(0) + " " + split_names[1].charAt(0) + ".");
    }
    return split_names[0];
};
console.log(abbrev_name("Simran Narang"));

Output:

"S N."
-------------------------------
Q6:

Input:
protection = function (email) {
    var avg, splitted, part1, part2;
    splitted = email.split("@");
    part1 = splitted[0];
    avg = part1.length / 2;
    part1 = part1.substring(0, (part1.length - avg));
    part2 = splitted[1];
    return part1 + "...@" + part2;
};

console.log(protection("narang.simran30@gmail.com"));

Output:

narang....@gmail.com
-------------------------------------------------------------------------------------

Q7:

Input:

string_parameterize = function (str1) {
    return str1.trim().toLowerCase().replace(/[^a-zA-Z0-9 -]/, "").replace(/\s/g, "-");
};
console.log(string_parameterize("Simran Narang from Boeing."));

Output:

Simran-Narang-from-boeing
---------------------------------------------------------------------------------------
Q10:
Input:

swap = function (swap_it){

return swap_it.replace(/([a-z]+)|([A-Z]+)/g, function(match, chr){
return chr ? match.toUpperCase() : match.toLowerCase();
});
}

swap("hfbvsibvBFDVBK");

Output:

"HFBVSIBVbfdvbk"
-----------------------------------------------------------------------------------

Q12:
Input:

function uncamelize(str, separator){
if(typeof(separator) == "undefined"){
separator = " ";
}
var str = str.replace(/[A-Z]/g, function (letter)
{return separator + letter.toLowerCase();
});
return str.replace("/^" + separator + "/", " ")
}

uncamelize("SimranNarang");
uncamelize("SimranNarang","_");
uncamelize("SimranNarang","-");

Output:

"simran narang"
"simran_narang"
"simran-narang"
--------------------------------------------------------------------------------

Q13:
Input:

concatenate = function(str, count){
if(typeof(count) == "undefined"){
count =1;
}
return count < 1 ? '' : new Array(count + 1).join(str);
}

concatenate("ha!");
concatenate("ha!",2);
concatenate("ha!",3);
concatenate("ha!",4);
concatenate("ha!",5);

Output:

"ha!"
"ha!ha!"
"ha!ha!ha!"
"ha!ha!ha!ha!"
"ha!ha!ha!ha!ha!"
---------------------------------------------------------------------------------
Q15:

Input:
humanize_format = function humanize(num) {
   if(typeof(num) == "undefined") return;
  if(num % 100 >= 11 && num % 100 <= 13)
        return num + "th";
        
        switch(num % 10) {
            case 1: return num + "st";
            case 2: return num + "nd";
            case 3: return num + "rd";
        }
        return num + "th";
    }

    humanize_format(51);
    humanize_format(63);
    humanize_format(11);
    humanize_format(99);

    Output:

    51st	
    63rd
    11th
    99th
----------------------------------------------------------------------------------

Q16:

Input:

text_truncate = function(str, length, ending) {
    if (length == null) {
      length = 100;
    }
    if (ending == null) {
      ending = '...';
    }
    if (str.length > length) {
      return str.substring(0, length - ending.length) + ending;
    } else {
      return str;
    }
  };
console.log(text_truncate('Google Scholar is good for conducting simple searches across a broad number of databases. For complex or in depth searching we recommend that you search individual subject databases.'))
console.log(text_truncate('Google Scholar is good for conducting simple searches across a broad number of databases. For complex or in depth searching we recommend that you search individual subject databases. .',19))
console.log(text_truncate('Google Scholar is good for conducting simple searches across a broad number of databases. For complex or in depth searching we recommend that you search individual subject databases. .',15,'!!'))

Output:

Google Scholar is good for conducting simple searches across a broad number of databases. For com... 

Google Scholar i... 

Google Schola!!
--------------------------------------------------------------------------------------

Q18:

Input:

function count(main_str, sub_str) 
    {
    main_str += '';
    sub_str += '';

    if (sub_str.length <= 0) 
    {
        return main_str.length + 1;
    }

       subStr = sub_str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
       return (main_str.match(new RegExp(subStr, 'gi')) || []).length;
    }

    console.log(count("The quick brown fox jumps over the lazy dog", 'the'));
	console.log(count("The quick brown fox jumps over the lazy dog", 'fox'));
    
Output:

2

1
=====================================================================

Q19:

Input:

function escape_HTML(html_str) {
    'use strict';

    return html_str.replace(/[&<>"]/g, function (tag) {
		var chars_to_replace = {
            '&': '&',
            '<': '<',
            '>': '>',
            '"': '"'
        };

		return chars_to_replace[tag] || tag;
	});
}

console.log(escape_HTML(''));

Output:

"&lt;a href=&quot;javascript-string-exercise-17.php&quot; target=&quot;_blank&quot;&gt;"

=====================================================================--

Q23:

Input:

function strip(str) {
    return str.replace(/^\s+|\s+$/g, '');
}

console.log(strip('SimranNarang '));
console.log(strip(' SimranNarang'));
console.log(strip(' SimranNarang  '));

Output:

SimranNarang
SimranNarang
SimranNarang

=====================================================================-----

Q27:

Input:

function ascii_to_hexa(str)
  {
	var arr1 = [];
	for (var n = 0, l = str.length; n < l; n ++) 
     {
		var hex = Number(str.charCodeAt(n)).toString(16);
		arr1.push(hex);
	 }
	return arr1.join('');
   }

console.log(ascii_to_hexa('12'));
console.log(ascii_to_hexa('100'));


Output:

"3132"
"313030"

=====================================================================-----

Q31:

Input:
function escape_html(str) {
if ((str===null) || (str===''))
       return false;
 else
   str = str.toString();
  
  var map = {
  '&': '&amp;',
	'<': '&lt;',
	'>': '&gt;',
	'"': '&quot;',
	"'": '&#039;'
  };

  return str.replace(/[&<>"']/g, function(m) { return map[m]; });

console.log(escape_html("Coffee > Simran & Human"));

Output:

Coffee &gt; Simran &amp; Human
=====================================================================--
Q33:

Input:

function remove_non_word (str) {
    if ((str===null) || (str===''))
       return false;
 else
   str = str.toString();
  
var PATTERN = /[^\x20\x2D0-9A-Z\x5Fa-z\xC0-\xD6\xD8-\xF6\xF8-\xFF]/g;
  
  return str.replace(PATTERN, '');

  console.log(remove_non_word("Simran !@#$%^&*()*&^%$@! Narang"))

  Output:

  Simran Narang
  ---------------------------------------------------------------------------------------

Q35:

Input:
function strip_html_tags(str)
{
   if ((str===null) || (str===''))
       return false;
  else
   str = str.toString();
  return str.replace(/<[^>]*>/g, '');
}

console.log(strip_html_tags("<main><div><p><body>Simran Narang<p><a></div><footer>"))

Output:

Simran Narang
=====================================================================
Q36:

Input:

function zeroFill(number, width, osign) {
    var num = '' + Math.abs(number),
        zerosw = width - num.length,
        sign = number >= 0;
    return (sign ? (osign ? '+' : '') : '-') +
        Math.pow(10, Math.max(0, zerosw)).toString().substr(1) + num;
}

console.log(zeroFill(-200, 7, '+'))
console.log(zeroFill(-200, 7, '-'))
console.log(zeroFill(200, 7, '+'))
console.log(zeroFill(200, 7, ))

Output:

-0000200
-0000200
+0000200
 0000200
 --------------------------------------------------------------------------------------

 Q37:

 Input:

 function compare_strings(str1, str2)
{
var areEqual = str1.toUpperCase() === str2.toUpperCase();
  return areEqual;
}

compare_strings('abcd', 'AbcD');
compare_strings('ABCD', 'Abce');

Output:

True
False
=====================================================================

Q38:

Input:

function case_insensitive_search(str, search_str)
  {
    var result= str.search(new RegExp(search_str, "i"));
  
    if (result>0)
    return 'Matched';
    else
    return 'Not Matched';  
   }

   console.log(case_insensitive_search("For complex or in depth searching we recommend that you search individual subject databases.", 'complex'));
   console.log(case_insensitive_search("For complex or in depth searching we recommend that you search individual subject databases.", 'Complex'));
   console.log(case_insensitive_search("For complex or in depth searching we recommend that you search individual subject databases.", 'complexSS'));

Output:

"Matched"
"Matched"
"Not Matched"
=====================================================================
Q48

function successor(str) {
        var alphabet = 'abcdefghijklmnopqrstuvwxyz',
            length = alphabet.length,
            result = str,
            i = str.length;

        while(i >= 0) {
            var last = str.charAt(--i),
                next = '',
                carry = false;

            if (isNaN(last)) {
                index = alphabet.indexOf(last.toLowerCase());

                if (index === -1) {
                    next = last;
                    carry = true;
                }
                else {
                    var isUpperCase = last === last.toUpperCase();
                    next = alphabet.charAt((index + 1) % length);
                    if (isUpperCase) {
                        next = next.toUpperCase();
                    }

                    carry = index + 1 >= length;
                    if (carry && i === 0) {
                        var added = isUpperCase ? 'A' : 'a';
                        result = added + next + result.slice(1);
                        break;
                    }
                }
            }
            else {
                next = +last + 1;
                if(next > 9) {
                    next = 0;
                    carry = true;
                }

                if (carry && i === 0) {
                    result = '1' + next + result.slice(1);
                    break;
                }
            }

            result = result.slice(0, i) + next + result.slice(i + 1);
            if (!carry) {
                break;
            }
        }
        return result;
    }

console.log(successor('abcd'));
console.log(successor('3456'));